#include <stdio.h>
#define MAX 10
#define INF 999

int cost[MAX][MAX];
int n;

int find(int parent[], int vertex) {
    while (parent[vertex] != -1)
        vertex = parent[vertex];
    return vertex;
}

void kruskal() {
    int parent[MAX];
    int totalCost = 0;
    int edgeCount = 0;

    for (int i = 0; i < n; i++)
        parent[i] = -1;

    printf("\nEdges selected for the Minimum Spanning Tree:\n");

    while (edgeCount < n - 1) {
        int min = INF;
        int u = -1, v = -1;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (cost[i][j] < min) {
                    min = cost[i][j];
                    u = i;
                    v = j;
                }
            }
        }

        int rootU = find(parent, u);
        int rootV = find(parent, v);

        if (rootU != rootV) {
            printf("Edge %d: (%d - %d) Cost = %d\n", edgeCount + 1, u, v, min);
            parent[rootV] = rootU;
            totalCost += min;
            edgeCount++;
        }

        cost[u][v] = cost[v][u] = INF;
    }

    printf("\nTotal Cost of Minimum Spanning Tree = %d\n", totalCost);
}

int main() {
    printf("Enter the number of vertices: ");
    scanf("%d", &n);

    printf("Enter the cost adjacency matrix:\n");
    printf("(Enter %d if no edge exists between two vertices)\n", INF);

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &cost[i][j]);
        }
    }

    kruskal();

    return 0;
}
